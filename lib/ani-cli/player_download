#!/bin/sh

player_commands () {
	printf '%s %s' "ffmpeg" "aria2c"
}

download () {
	case $2 in
		*manifest*m3u8*)
			ffmpeg -loglevel error -stats -referer "$1" -i "$2" -c copy "$download_dir/$3.mp4" ;;
		*m3u8*)
			progress "Fetching Metadata.."
			[ -d "$tmpdir" ] || mkdir "$tmpdir"
			m3u8_data="$(curl -s "$2")"
			key_uri="$(printf "%s" "$m3u8_data" | sed -nE 's/^#EXT-X-KEY.*URI="([^"]*)"/\1/p')"
			m3u8_data="$(printf "%s" "$m3u8_data" | sed "/#/d")"
			printf "%s" "$m3u8_data" | grep -q "http" || relative_url=$(printf "%s" "$2" | sed "s|[^/]*$||")
			range=$(printf "%s\n" "$m3u8_data" | wc -l)
			# Getting and 'decrypting' encryption key
			if [ -n "$key_uri" ];then
				key=$(curl -s "$key_uri" | od -A n -t x1 | tr -d ' |\n')
				iv=$(openssl rand -hex 16)
			fi
			# Asyncronously downloading pieces to temporary directory
			inf "pieces : $range"
			for i in $(seq "$range"); do
				curl -s "${relative_url}$(printf "%s" "$m3u8_data" | sed -n "${i}p")" > "$tmpdir/$(printf "%04d" "$i").ts" && printf "\033[2K\r \033[1;32mâœ“ %s / %s done" "$i" "$range" &
				jobs -p > "$jobfile"
				while [ "$(wc -w "$jobfile" | cut -d' ' -f1)" -ge 35 ];do jobs > "$jobfile";sleep 0.05;done
			done
			wait
			# Decrypting and concatenating the pieces
			if [ -n "$key_uri" ];then
				progress "Decrypting and Concatenating pieces into single file.."
				for i in "$tmpdir"/* ; do
					openssl enc -aes128 -d -K "$key" -iv "$iv" -nopad >> video.ts < "$i"
				done
			else
				progress "Concatenating pieces into single file.."
				cat "$tmpdir"/* >> video.ts
			fi
			# cleanup and encoding
			rm -rdf "$tmpdir" "$jobfile"
			inf "Encoding file to mp4 video.."
			ffmpeg -loglevel error -stats -i "video.ts" -c copy "$download_dir/$3.mp4"
			rm -f video.ts
			;;
		*)
			aria2c --check-certificate=false --summary-interval=0 -x 16 -s 16 --referer="$1" "$2" --dir="$download_dir" -o "$3.mp4" --download-result=hide ;;
	esac
}

play_episode () {
	inf "Downloading $trackma_title"
	video_url="$1"; refr="$2" trackma_title="$3"
	if download "$refr" "$video_url" "$trackma_title"; then
		inf "Downloaded episode: $trackma_title"
	else
		err "Download failed episode: $trackma_title , please retry or check your internet connection"
	fi
}

jobfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-jobs"
tmpdir="${XDG_CACHE_HOME:-$HOME/.cache}/ani-temp"
export is_download=1;
