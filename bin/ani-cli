#!/bin/sh

# License preamble at the end of the file
# Version number
VERSION="3.2.2"


#######################
# AUXILIARY FUNCTIONS #
#######################

help_text () {
	while read -r line; do
		printf "%s\n" "$line"
	done <<-EOF

	Usage:
	  ${0##*/} [-s] [-v] [-x] [-q <quality>] [-a <episode>] [-d | -p <download_dir>] [<query>] [-f <provider_no.>]
	  ${0##*/} [-s] [-v] [-x] [-q <quality>] -c
	  ${0##*/} -h | -D | -U | -V

	Options:
	  -v use VLC as the media player
	  -q set video quality (best|worst|360|480|720|1080)
	  -s watch anime together with friends, using Syncplay (works with mpv only)
	  -a specify episode to watch
	  -d download episode
	  -p download episode to specified directory
	  -c continue watching anime from history
	  -h show helptext
	  -D delete history
	  -U fetch update from github
	  -V print version number and exit
	  -f select provider to scrape first [1-7]
	  -x print all video links from all providers to stdout (for debugging purpose)

	Episode selection:
	  Multiple episodes can be chosen given a range
	    Choose episode [1-13]: 1 6
	    This would choose episodes 1 2 3 4 5 6
		To select the last episode use -1

	  When selecting non-interactively, the first result will be
	  selected, if anime is passed
EOF
}

version_text () {
	inf "Version: $VERSION"
}

die () {
	err "$*"
	exit 1
}

# get the newest version of this script from github and replace it
update () {
	for i ; do
		filename="$(printf '%s' "$i" | sed "s_$root_dir/__")"
		update="$(curl -A "$agent" -s "https://raw.githubusercontent.com/pystardust/ani-cli/master/$filename")" || die "Connection error"
		update="$(printf '%s\n' "$update" | diff -u "$i" -)"
		if [ -z "$update" ]; then
			inf "$filename is up to date :)"
		else
			if printf '%s\n' "$update" | patch "$i" - ; then
				inf "$filename has been updated"
			else
				die "Can't update $filename for some reason!"
			fi
	fi
	done
}

# checks if dependencies are present
dep_ch () {
	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			err "Program \"$dep\" not found. Please install it."
			#aria2c is in the package aria2
			[ "$dep" = "aria2c" ] && err "To install aria2c, Type <your_package_manager> aria2"
			die
		fi
	done
}


#############
# SEARCHING #
#############

# gets anime names along with its id for search term
search_anime () {
	search=$(printf '%s' "$1" | tr ' ' '-' )
	curl -s "https://gogoanime.lu//search.html?keyword=$search" -L |
		sed -nE 's_^[[:space:]]*<a href="/category/([^"]*)" title.*_\1_p'
}

#fetches all the episodes embed links in an anime from gogoanime server
episode_list () {
	data=$(curl -A "$agent" -s "$base_url/v1/$1" | sed -nE "s/.*malid = '(.*)';/\1/p ; s_.*epslistplace.*>(.*)</div>_\1_p" | tr -d '\r')
	#extract all embed links of all episode from data
	select_ep_result=$(printf "%s" "$data" | head -1 | tr "," "\n" | sed '/extra/d' | sed -nE 's_".*":"(.*)".*_\1_p')
	first_ep_number=1
	[ -z "$select_ep_result" ] && last_ep_number=0 || last_ep_number=$(printf "%s\n" "$select_ep_result" | wc -l)
}

#from allanime server
al_episode_list() {
	ext_id=$(printf "%s" "$data" | tail -1)
	al_server_link=$(curl -s -H "x-requested-with:XMLHttpRequest" -X POST "https://animixplay.to/api/search" -d "recomended=$ext_id" -A "$agent" |
		sed -nE 's_.*"AL","items":\[(.*)\]\},.*_\1_p' | tr '{|}' '\n' | sed -nE 's_"url":"(.*)",.*title.*_\1_p')
	[ -z "$al_server_link" ] && return 0
	progress "(Allanime) Searching Episodes.."
	if printf "%s" "$selection_id" | grep -q "dub"; then
		al_server_link=$(printf "%s" "$al_server_link" | grep "dub" | head -1)
	else
		al_server_link=$(printf "%s" "$al_server_link" | sed 's/-dub//' | head -1)
	fi
	al_data=$(curl -s "${base_url}${al_server_link}" -A "$agent" | sed -nE 's_.*epslistplace.*>(.*)</div>_\1_p')
}

process_hist_entry () {
	temp_anime_id=$(printf "%s" "$anime_id" | sed 's/\t[0-9]*.$//')
	current_ep=$(printf "%s" "$anime_id" | sed "s/$temp_anime_id\t//g")
	episode_list "$temp_anime_id"
	latest_ep=$last_ep_number
	if [ -n "$latest_ep" ] && [ "$latest_ep" -ge "$current_ep" ]; then
		printf "%s : %s / %s\n" "$temp_anime_id" "$current_ep" "$latest_ep"
	fi
}

# compares history with gogoplay, only shows unfinished anime
search_history () {
	[ ! -s "$logfile" ] && die "History is empty"
	progress "Processing $scrape.."
	search_results=$(while read -r anime_id; do process_hist_entry & done < "$logfile"; wait)
	[ -z "$search_results" ] && die "No unwatched episodes"
	one_hist=$(printf '%s\n' "$search_results" | grep -e "$" -c)
	[ "$one_hist" = 1 ] && select_first=1
	anime_selection "$search_results"
	ep_choice_start=$(sed -n -E "s/${selection_id}\t(.*)/\1/p" "$logfile")
}

##################
# URL PROCESSING #
##################

generate_link() {
	case $1 in
		1)
			progress "Fetching Mp4upload links.."
			refr=$(printf "%s" "$al_links" | grep "mp4upload")
			[ -z "$refr" ] && refr=$(printf "%s" "$resp" | grep "mp4upload")
			[ -z "$refr" ] && return 0
			result_links="$(curl -A "$agent" -s "$refr" -H "DNT: 1" -L |
				sed -nE 's_.*embed\|(.*)\|.*blank.*\|(.*)\|(.*)\|(.*)\|(.*)\|src.*_https://\1.mp4upload.com:\5/d/\4/\3.\2_p')"
			;;
		2)
			progress "Fetching Doodstream links.."
			dood_id=$(printf "%s" "$al_links" | sed -n "s_.*dood.*/e/__p")
			[ -z "$dood_id" ] && dood_id=$(printf "%s" "$resp" | sed -n "s_.*dood.*/e/__p")
			refr="https://dood.pm/e/$dood_id"
			[ -z "$dood_id" ] || dood_md5=$(curl -A "$agent" -s "$refr" --max-time 10 | sed -nE "s|.*'(.*pass_md5.*)', func.*|\1|p")
			[ -z "$dood_md5" ] && return 0
			result_links="$(curl -A "$agent" -s "https://dood.pm${dood_md5}" -e "$refr" || true)doodstream?token=$(printf "%s" "$dood_md5" | cut -d'/' -f4 || true)&expiry=$(date +%s)000"
			;;
		3)
			progress "Fetching Streamlare links.."
			lare_id=$(printf "%s" "$al_links" | sed -nE 's_.*streamlare.*/e/(.*)_\1_p')
			[ -z "$lare_id" ] && lare_id=$(printf "%s" "$dpage_url" | sed -nE 's_.*streamlare.*/e/(.*)_\1_p')
			refr="https://streamlare.com/e/$lare_id"
			[ -z "$lare_id" ] && return 0
			lare_token=$(curl -s -A "$agent" "$refr" -L | sed -nE 's/.*csrf-token.*content="(.*)">/\1/p')
			[ -z "$lare_token" ] || result_links="$(curl -s -A "$agent" -H "x-requested-with:XMLHttpRequest" -X POST "https://streamlare.com/api/video/download/get" -d "{\"id\":\"$lare_id\"}" \
				-H "x-csrf-token:$lare_token" -H "content-type:application/json;charset=UTF-8" | sed 's/\\//g' | sed -nE 's/.*url":"([^"]*)".*/\1/p')"
			;;
		4)
			progress "Fetching Okru links.."
			ok_id=$(printf "%s" "$al_links" | sed -nE 's_.*ok.*videoembed/(.*)_\1_p')
			[ -z "$ok_id" ] && ok_id=$(printf "%s" "$dpage_url" | sed -nE 's_.*ok.*videoembed/(.*)_\1_p')
			refr="https://odnoklassniki.ru/videoembed/$ok_id"
			[ -z "$ok_id" ] && return 0
			result_links="$(curl -s "$refr" | sed -nE 's_.*data-options="([^"]*)".*_\1_p' | sed -e 's/&quot;/"/g' -e 's/\u0026/\&/g' -e 's/amp;//g' | sed 's/\\//g' | sed -nE 's/.*videos":(.*),"metadataE.*/\1/p' | tr '{|}' '\n' |
				sed -nE 's/"name":"mobile","url":"(.*)",.*/144p >\1/p ;
						s/"name":"lowest","url":"(.*)",.*/240p >\1/p ;
						s/"name":"low","url":"(.*)",.*/360p >\1/p ;
						s/"name":"sd","url":"(.*)",.*/480p >\1/p ;
						s/"name":"hd","url":"(.*)",.*/720p >\1/p ;
						s/"name":"full","url":"(.*)",.*/1080p >\1/p')"
			;;
		5)
			progress "Fetching Xstreamcdn links.."
			fb_id=$(printf "%s" "$resp" | sed -n "s_.*fembed.*/v/__p")
			refr="https://fembed-hd.com/v/$fb_id"
			[ -z "$fb_id" ] && return 0
			result_links="$(curl -A "$agent" -s -X POST "https://fembed-hd.com/api/source/$fb_id" -H "x-requested-with:XMLHttpRequest" |
				sed -e 's/\\//g' -e 's/.*data"://' | tr "}" "\n" | sed -nE 's/.*file":"(.*)","label":"(.*)","type.*/\2>\1/p')"
			;;
		6)
			progress "Fetching Animixplay Direct links.."
			refr="$base_url"
			[ -z "$id" ] && return 0
			enc_id=$(printf "%s" "$id" | base64)
			ani_id=$(printf "%sLTXs3GrU8we9O%s" "$id" "$enc_id" | base64)
			result_links="$(curl -s "$base_url/api/live${ani_id}" -A "$agent" -I | sed -nE 's_location: (.*)_\1_p' | cut -d"#" -f2 | base64 -d)"
			;;
		*)
			progress "Fetching Goload Direct links.."
			refr="https://goload.pro"
			[ -z "$id" ] && return 0
			secret_key=$(printf "%s" "$resp" | sed -n '2p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
			iv=$(printf "%s" "$resp" | sed -n '3p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
			second_key=$(printf "%s" "$resp" | sed -n '4p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
			token=$(printf "%s" "$resp" | head -1 | base64 -d | openssl enc -d -aes256 -K "$secret_key" -iv "$iv" | sed -nE 's/.*&(token.*)/\1/p')
			ajax=$(printf '%s' "$id" | openssl enc -e -aes256 -K "$secret_key" -iv "$iv" -a)
			data=$(curl -A "$agent" -s -H "X-Requested-With:XMLHttpRequest" "https://goload.pro/encrypt-ajax.php?id=${ajax}&alias=${id}&${token}" | sed -e 's/{"data":"//' -e 's/"}/\n/' -e 's/\\//g')
			result_links="$(printf '%s' "$data" | base64 -d 2>/dev/null | openssl enc -d -aes256 -K "$second_key" -iv "$iv" 2>/dev/null |
				sed -e 's/\].*/\]/' -e 's/\\//g' | grep -Eo 'https:\/\/[-a-zA-Z0-9@:%._\+~#=][a-zA-Z0-9][-a-zA-Z0-9@:%_\+.~#?&\/\/=]*')"
			;;
	esac
}

# chooses the link for the set quality
get_video_link() {
	dpage_url="$1"
	id=$(printf "%s" "$dpage_url" | sed -nE 's/.*id=(.*)&title.*/\1/p')
	al_links=$(printf "%s" "$al_data" | sed -e 's_:\[_\n_g' -e 's_:"_\n"_g' | sed -e 's/].*//g' -e '1,2d' | sed -n "${episode}p" | tr -d '"' | tr "," "\n")
	[ -z "$id" ] && id=$(printf "%s" "$al_links" | sed -nE 's/.*id=(.*)&title.*/\1/p')
	#multiple sed are used (regex seperated by ';') for extracting only required data from response of embed url
	resp="$(curl -A "$agent" -s "https://goload.pro/streaming.php?id=$id" |
		sed -nE 's/.*class="container-(.*)">/\1/p ;
			s/.*class="wrapper container-(.*)">/\1/p ;
			s/.*class=".*videocontent-(.*)">/\1/p ;
			s/.*data-value="(.*)">.*/\1/p ;
			s/.*data-status="1".*data-video="(.*)">.*/\1/p')"
	# providers: Doodstream for default, mp4upload for downloading. For best quality use okru, for fallback use goload. Then it's a round robin of which links are returned.
	provider=2
	uname -a | grep -qE '[Aa]ndroid' && provider=3
	[ "$is_download" -eq 1 ] && provider=1
	[ "$quality" != "best" ] && provider=4
	[ -n "$select_provider" ] && provider="$select_provider"
	i=0
	while [ "$i" -lt 7 ] && [ -z "$result_links" ];do
		generate_link "$provider"
		provider=$((provider % 7 + 1))
		if [ "$debug" -eq 1 ]; then
			debug "$refr" "$result_links"
			unset result_links
		fi
		: $((i+=1))
	done
	[ "$debug" -eq 1 ] && return 0
	if printf '%s' "$result_links" | grep -q "m3u8"; then
		get_video_quality_m3u8 "$result_links"
	else
		video_url=$(get_video_quality_mp4 "$result_links")
	fi
	unset result_links
}

get_video_quality_mp4() {
	case $quality in
		best)
			video_url=$(printf '%s' "$1" | tail -n 1 | cut -d">" -f2) ;;
		worst)
			video_url=$(printf '%s' "$1" | head -n 1 | cut -d">" -f2) ;;
		*)
			video_url=$(printf '%s' "$1" | grep -i "${quality}p" | head -n 1 | cut -d">" -f2)
			if [ -z "$video_url" ]; then
				err "Current video quality is not available (defaulting to best quality)"
				video_url=$(printf '%s' "$1" | tail -n 1 | cut -d">" -f2)
			fi
			;;
	esac
	printf '%s' "$video_url"
}

get_video_quality_m3u8() {
	printf '%s' "$1" | grep -qE "manifest.*m3u.*" && video_url=$1 && return 0
	m3u8_links=$(curl -A "$agent" -s --referer "$dpage_link" "$1")
	case $quality in
		best)
			res_selector=$(printf "%s" "$m3u8_links" | sed -nE 's_.*RESOLUTION=.*x([^,]*),.*_\1_p' | sort -nr | head -1);;
		worst)
			res_selector=$(printf "%s" "$m3u8_links" | sed -nE 's_.*RESOLUTION=.*x([^,]*),.*_\1_p' | sort -nr | tail -1);;
		*)
			res_selector=$quality
			if ! (printf '%s' "$m3u8_links" | grep -q "$quality,"); then
				err "Current video quality is not available (defaulting to best quality)"
				res_selector=$(printf "%s" "$m3u8_links" | sed -nE 's_.*RESOLUTION=.*x([^,]*),.*_\1_p' | sort -nr | head -1)
			fi
			;;
	esac
	video_url=$(printf '%s' "$m3u8_links" | sed -n "/$res_selector,/{n;p;}" | tr -d '\r')
	printf "%s" "$m3u8_links" | grep -q "http" || video_url="$(printf "%s" "$1" | sed 's|[^/]*$||')$video_url" || true
}


#################
# INPUT PARSING #
#################

append () {
	[ -z "$1" ] || printf  "%s\n" "$1"
	printf "%s %s" "$3" "$2"
}

# only lets the user pass in case of a valid search
process_search () {
	progress "Searching $scrape.."
	search_results=$(search_anime "$query")
	while [ -z "$search_results" ]; do
		retry 'No search results found'
		query="$REPLY $REPLY2"
		progress "Searching $scrape.."
		search_results=$(search_anime "$query")
	done
	anime_selection "$search_results"
	episode_selection
}

# anime-selection menu handling function
anime_selection () {
	inf "$scrape Results >>"
	count=1
	unset selection_list
	while read -r anime_id; do
		displayed_title=$(printf '%s' "$anime_id" | tr '-' ' ')
		selection_list=$(append "$selection_list" "$displayed_title" "$count")
		: $((count+=1))
	done <<-EOF
	$search_results
	EOF
	if [ -n "$select_first" ]; then
		tput clear
		choice=1
	elif [ -z "$ep_choice_to_start" ] || { [ -n "$ep_choice_to_start" ] && [ -z "$select_first" ]; }; then
		selection_list=$(append "$selection_list" "exit" "q")
		selection_menu "$selection_list"
		choice="$REPLY"
		while ! [ "$choice" -eq "$choice" ] 2>/dev/null || [ "$choice" -lt 1 ] || [ "$choice" -ge "$count" ] || [ "$choice" = " " ]; do
			[ "$choice" = "q" ] && exit 0
			retry "Invalid choice entered"
			choice="$REPLY"
		done
	fi
	# Select respective anime_id
	selection_id="$(printf "%s" "$search_results" | sed -n "${choice}p" | cut -d':' -f1 | tr -d ' ')"
	progress "(Gogoanime) Searching Episodes.."
	episode_list "$selection_id"
	al_episode_list
}

# gets episode number from user, makes sure it's in range, skips input if only one episode exists
episode_selection () {
	[ "$last_ep_number" -eq 0 ] && die "Episodes not released yet!"
	if [ "$last_ep_number" -gt "$first_ep_number" ]; then
		[ "$ep_choice_to_start" = "-1" ] && ep_choice_to_start="$last_ep_number"
		if [ -z "$ep_choice_to_start" ]; then
			# if branches, because order matters this time
			while : ; do
				prompt "To specify a range, use: start_number end_number (Episodes: $first_ep_number-$last_ep_number)"
				ep_choice_start="$REPLY"
				ep_choice_end="$REPLY2"
				[ "$REPLY" = q ] && exit 0
				[ "$ep_choice_start" = "-1" ] && ep_choice_start="$last_ep_number"
				[ "$ep_choice_end" = "-1" ] && ep_choice_end="$last_ep_number"
				if ! [ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || { [ -n "$ep_choice_end" ] && ! [ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null; }; then
					err "Invalid number(s)"
					continue
				fi
				if [ "$ep_choice_start" -gt "$last_ep_number" ] 2>/dev/null || [ "$ep_choice_end" -gt "$last_ep_number" ] 2>/dev/null || [ "$ep_choice_start" -lt "$first_ep_number" ] 2>/dev/null; then
					err "Episode out of range"
					continue
				fi
				if [ -n "$ep_choice_end" ] && [ "$ep_choice_end" -le "$ep_choice_start" ]; then
					err "Invalid range"
					continue
				fi
				break
			done
		else
			ep_choice_start="$ep_choice_to_start" && unset ep_choice_to_start
		fi
	else
		# In case the anime contains only a single episode
		ep_choice_start=1
	fi
	if [ -z "$ep_choice_end" ]; then
		auto_play=0
	else
		auto_play=1
	fi
}

# creates $episodes from $ep_choice_start and $ep_choice_end
generate_ep_list() {
	episodes=$ep_choice_start
	[ -n "$ep_choice_end" ] && episodes=$(seq "$ep_choice_start" "$ep_choice_end")
}


##################
# VIDEO PLAYBACK #
##################

append_history () { # todo: unite this with the temporary histfile writing
	grep -q "$selection_id" "$logfile" || printf "%s\t%s\n" "$selection_id" $((episode+1)) >> "$logfile"
}

# opens selected episodes one-by-one
open_selection() {
	for ep in $episodes; do
		open_episode "$selection_id" "$ep"
	done
	episode=${ep_choice_end:-$ep_choice_start}
}

open_episode () {
	anime_id="$1"
	episode="$2"
	tput clear
	progress "Loading episode $episode..."
	# decrypting url
	dpage_link=$(printf "%s" "$select_ep_result" | sed -n "${episode}p")
	if [ -z "$dpage_link" ];then
		err "Episode doesn't exist!!"
	else
		get_video_link "$dpage_link"
	fi
	[ "$debug" -eq 1 ] && exit 0
	# write anime and episode number and save to temporary history
	sed -E "s/^${selection_id}\t[0-9]*/${selection_id}\t$((episode+1))/" "$logfile" > "${logfile}.new"
	[ ! "$PID" = "0" ] && kill "$PID" >/dev/null 2>&1
	[ -z "$video_url" ] && die "Video URL not found"
	trackma_title="$(printf '%s' "$anime_id Episode $episode" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1')"
	if [ "$auto_play" -eq 0 ]; then
		play_episode "$video_url" "$refr" "$trackma_title" "$auto_play"
	else
		printf "\n"
		play_episode "$video_url" "$refr" "$trackma_title" "$auto_play"
		wait "$!"
		sleep 2
	fi
	PID=$!
	# overwrite history with temporary history
	mv "${logfile}.new" "$logfile"
}


############
# START UP #
############

# clears the colors and deletes temporary logfile when exited using SIGINT
trap 'printf "\033[0m";rm -rdf "video.ts" "$tmpdir" "$jobfile" "$logfile".new;exit 1' INT HUP

# default options
agent="Mozilla/5.0 (X11; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/100.0"
is_download=0
PID=0
quality=best
scrape=Query
debug=0
choice=
auto_play=0
download_dir="$(pwd)"
bin_dir="$(dirname "$0")"
root_dir="$(cd "$bin_dir/.." && pwd)"
lib_dir="$root_dir/lib/ani-cli"
case "$(uname)" in
	Darwin*) . "$lib_dir/player_iina" || die "No iina player script found";; #MacOS specific
	*) . "$lib_dir/player_mpv" || die "No mpv player script found";;
esac
# history file path
logfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-hsts"
logdir="${XDG_CACHE_HOME:-$HOME/.cache}"
# create history file and history dir if none found
[ -d "$logdir" ] || mkdir "$logdir"
[ -f "$logfile" ] || : > "$logfile"
# source the UI
. "$lib_dir/UI" || die "No UI file"

while getopts 'svq:dp:chDUVa:xf:' OPT; do
	case $OPT in
		d) . "$lib_dir/player_download" || die "No download player script found" ;;
		a) ep_choice_to_start=$OPTARG ;;
		D)
			: > "$logfile"
			exit 0
			;;
		p)
			. "$lib_dir/player_download" || die "No download player script found"
			download_dir="$OPTARG"
			;;
		s) . "$lib_dir/player_syncplay" || die "No syncplay player script found";;
		q) quality=$OPTARG ;;
		x) debug=1 ;;
		f) select_provider=$OPTARG ;;
		c) scrape=History ;;
		v) . "$lib_dir/player_vlc" || die "No vlc player script found";;
		U)
			update "$bin_dir/ani-cli" "$lib_dir/UI" "$lib_dir"/player_*
			exit 0
			;;
		V)
			version_text
			ui_version_text
			exit 0
			;;
		*)
			help_text
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))
progress "Checking dependencies.."
# shellcheck disable=SC2046
dep_ch "curl" "sed" "grep" "openssl" $(player_commands) || true

base_url="https://animixplay.to"
if [ "$scrape" = "Query" ];then
	if [ -z "$*" ]; then
		prompt "Search Anime"
		query="$REPLY $REPLY2"
	else
		if [ -n "$ep_choice_to_start" ]; then
			REPLY=1
			select_first=1
		fi
		query="$*"
	fi
	process_search
else
	search_history
	[ "$REPLY" = "q" ] && exit 0
fi

generate_ep_list
append_history
open_selection

########
# LOOP #
########

while : ; do
	auto_play=0
	unset menu
	unset options
	[ "$episode" -ne "$last_ep_number" ] && menu=$(append "$menu" 'next' 'n')
	[ "$episode" -ne "$first_ep_number" ] && menu=$(append "$menu" 'previous' 'p')
	menu=$(append "$menu" 'replay' 'r')
	[ "$first_ep_number" -ne "$last_ep_number" ] && menu=$(append "$menu" 'select' 's')
	menu=$(append "$menu" 'exit' 'q')
	selection_menu "$menu"
		choice="$REPLY"
	case $choice in
		n)
			ep_choice_start=$((episode + 1))
			unset ep_choice_end
			;;
		p)
			ep_choice_start=$((episode - 1))
			unset ep_choice_end
			;;
		r)
			ep_choice_start="$episode"
			unset ep_choice_end
			;;
		s)
			episode_selection ;;
		q)
			break ;;
		*)
			tput clear
			err "Invalid choice"
			continue
			;;
	esac
	generate_ep_list
	append_history
	open_selection
done

# ani-cli
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Project repository: https://github.com/pystardust/ani-cli
